{
    "pubs": [
        {
            "title": "Adore: Atomic Distributed Objects with Certified Reconfiguration",
            "authors": ["Wolf Honoré", "Ji-Yong Shin", "Jieung Kim", "Zhong Shao"],
            "conference": "ACM SIGPLAN International Conference on Programming Language Design and Implementation (PLDI)",
            "year": 2022,
            "url": "https://doi.org/10.1145/3519939.3523444",
            "abstract": ["Finding the right abstraction is critical for reasoning about complex systems such as distributed protocols like Paxos and Raft. Despite a recent abundance of impressive verification work in this area, we claim the ways that past efforts model distributed state are not ideal for protocol-level reasoning: they either hide important details, or leak too much complexity from the network. As evidence we observe that nearly all of them avoid the complex, but important issue of reconfiguration. Reconfiguration's primary challenge lies in how it interacts with a protocol's core safety invariants. To handle this increased complexity, we introduce the Adore model, whose novel abstract state hides network-level communications while capturing dependencies between committed and uncommitted states, as well as metadata like election quorums. It includes first-class support for a generic reconfiguration command that can be instantiated with a variety of implementations. Under this model, the subtle interactions between reconfiguration and the core protocol become clear, and with this insight we completed the first mechanized proof of safety of a reconfigurable consensus protocol."],
            "media": [{ "name": "Conference Talk Slides", "file": "pldi22-slides.pdf", "type": "slides" }]
        },
        {
            "title": "Much ADO About Failures: A Fault-Aware Model for Compositional Verification of Strongly Consistent Distributed Systems",
            "authors": ["Wolf Honoré", "Jieung Kim", "Ji-Yong Shin", "Zhong Shao"],
            "conference": "ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)",
            "year": 2021,
            "url": "https://doi.org/10.1145/3485474",
            "abstract": ["Despite recent advances, guaranteeing the correctness of large-scale distributed applications without compromising performance remains a challenging problem. Network and node failures are inevitable and, for some applications, careful control over how they are handled is essential. Unfortunately, existing approaches either completely hide these failures behind an atomic state machine replication (SMR) interface, or expose all of the network-level details, sacrificing atomicity. We propose a novel, compositional, atomic distributed object (ADO) model for strongly consistent distributed systems that combines the best of both options. The object-oriented API abstracts over protocol-specific details and decouples high-level correctness reasoning from implementation choices. At the same time, it intentionally exposes an abstract view of certain key distributed failure cases, thus allowing for more fine-grained control over them than SMR-like models. We demonstrate that proving properties even of composite distributed systems can be straightforward with our Coq verification framework, Advert, thanks to the ADO model. We also show that a variety of common protocols including multi-Paxos and Chain Replication refine the ADO semantics, which allows one to freely choose among them for an application's implementation without modifying ADO-level correctness proofs."],
            "media": [
                { "name": "Conference Talk Slides", "file": "oopsla21-slides.pdf", "type": "slides" },
                { "name": "Conference Talk Video", "file": "oopsla21-video.mp4", "type": "video" }
            ]
        },
        {
            "title": "Verifying an HTTP Key-Value Server with Interactions Trees and VST",
            "authors": ["Hengchu Zhang", "Wolf Honoré", "Nicolas Koh", "Yao Li", "Yishuai Li", "Li-Yao Xia", "Lennart Beringer", "William Mansky", "Benjamin Pierce", "Steve Zdancewic"],
            "conference": "International Conference on Interactive Theorem Proving (ITP)",
            "year": 2021,
            "url": "https://doi.org/10.4230/LIPIcs.ITP.2021.32",
            "abstract": ["We present a networked key-value server, implemented in C and formally verified in Coq. The server interacts with clients using a subset of the HTTP/1.1 protocol and is specified and verified using interaction trees and the Verified Software Toolchain. The codebase includes a reusable and fully verified C string library that provides 17 standard POSIX string functions and 17 general purpose non-POSIX string functions. For the KVServer socket system calls, we establish a refinement relation between specifications at user-space level and at CertiKOS kernel-space level."]
        },
        {
            "title": "Connecting Higher-Order Separation Logic to a First-Order Outside World",
            "authors": ["William Mansky", "Wolf Honoré", "Andrew Appel"],
            "conference": "European Symposium of Programming (ESOP)",
            "year": 2020,
            "url": "https://doi.org/10.1007/978-3-030-44914-8_16",
            "abstract": ["Separation logic is a useful tool for proving the correctness of programs that manipulate memory, especially when the model of memory includes higher-order state: Step-indexing, predicates in the heap, and higher-order ghost state have been used to reason about function pointers, data structure invariants, and complex concurrency patterns. On the other hand, the behavior of system features (e.g., operating systems) and the external world (e.g., communication between components) is usually specified using first-order formalisms. In principle, the soundness theorem of a separation logic is its interface with first-order theorems, but the soundness theorem may implicitly make assumptions about how other components are specified, limiting its use. In this paper, we show how to extend the higher-order separation logic of the Verified Software Toolchain to interface with a first-order verified operating system, in this case CertiKOS, that mediates its interaction with the outside world. The resulting system allows us to prove the correctness of C programs in separation logic based on the semantics of system calls implemented in CertiKOS. It also demonstrates that the combination of interaction trees + CompCert memories serves well as a lingua franca to interface and compose two quite different styles of program verification."]
        },
        {
            "title": "WormSpace: A Modular Foundation for Simple, Verifiable Distributed Systems",
            "authors": ["Ji-Yong Shin", "Jieung Kim", "Wolf Honoré", "Hernán Vanzetto", "Srihari Radhakrishnan", "Mahesh Balakrishnan", "Zhong Shao"],
            "conference": "ACM Symposium on Cloud Computing (SoCC)",
            "year": 2019,
            "url": "https://doi.org/10.1145/3357223.3362739",
            "abstract": ["We propose the Write-Once Register (WOR) as an abstraction for building and verifying distributed systems. A WOR exposes a simple, data-centric API: clients can capture, write, and read it. Applications can use a sequence or a set of WORs to obtain properties such as durability, concurrency control, and failure atomicity. By hiding the logic for distributed coordination underneath a data-centric API, the WOR abstraction enables easy, incremental, and extensible implementation and verification of applications built above it. We present the design, implementation, and verification of a system called WormSpace that provides developers with an address space of WORs, implementing each WOR via a Paxos instance. We describe three applications built over WormSpace: a flexible, efficient Multi-Paxos implementation; a shared log implementation with lower append latency than the state-of-the-art; and a fault-tolerant transaction coordinator that uses an optimal number of round-trips. We show that these applications are simple, easy to verify, and match the performance of unverified monolithic implementations. We use a modular layered verification approach to link the proofs for WormSpace, its applications, and a verified operating system to produce the first verified distributed system stack from the application to the operating system."]
        },
        {
            "title": "An Online Platform for Community-Based Language Description and Documentation",
            "authors": ["Rebecca Everson", "Wolf Honoré", "Scott Grimm"],
            "conference": "Workshop on Computational Methods for Endangered Languages (ComputEL)",
            "year": 2019,
            "url": "https://scholar.colorado.edu/scil-cmel/vol1/iss1/1/",
            "abstract": ["We present two pieces of interlocking technology in development to facilitate community-based, collaborative language description and documentation: (i) a mobile app where speakers submit text, voice recordings and/or videos, and (ii) a community language portal that organizes submitted data and provides question/answer boards whereby community members can evaluate/supplement submissions."],
            "media": [{ "name": "Conference Talk Slides", "file": "computel3-slides.pdf", "type": "slides" }]
        },
        {
            "title": "From C to Interaction Trees: Specifying, Verifying, and Testing a Networked Server",
            "authors": ["Nicolas Koh", "Yao Li", "Yishuai Li", "Li-yao Xia", "Lennart Beringer", "Wolf Honoré", "William Mansky", "Benjamin Pierce", "Steve Zdancewic"],
            "conference": "ACM SIGPLAN International Conference on Certified Programs and Proofs (CPP)",
            "year": 2019,
            "url": "https://doi.org/10.1145/3293880.3294106",
            "abstract": ["We present the first formal verification of a networked server implemented in C. Interaction trees, a general structure for representing reactive computations, are used to tie together disparate verification and testing tools (Coq, VST, and QuickChick) and to axiomatize the behavior of the operating system on which the server runs (CertiKOS). The main theorem connects a specification of acceptable server behaviors, written in a straightforward “one client at a time” style, with the CompCert semantics of the C program. The variability introduced by low-level buffering of messages and interleaving of multiple TCP connections is captured using network refinement, a variant of observational refinement."]
        }
    ],
    "talks": [
        {
            "title": "A Fault-Aware Model for Compositional Verification of Strongly Consistent Distributed Systems",
            "authors": ["Wolf Honoré", "Jieung Kim", "Ji-Yong Shin", "Zhong Shao"],
            "conference": "New England System Verification Day (NESVD)",
            "year": 2021,
            "media": [{ "name": "Conference Talk Slides", "file": "oopsla21-slides.pdf", "type": "slides" }]
        },
        {
            "title": "Briding the Specification Gap Between VST and CertiKOS",
            "authors": ["William Mansky", "Wolf Honoré"],
            "conference": "The Science of Deep Specifications (DeepSpec)",
            "year": 2019,
            "media": [{ "name": "Conference Talk Slides", "file": "deepspec19-slides.pdf", "type": "slides" }]
        }
    ],
    "thesis": [
        {
            "title": "The Atomic Distributed Object Model for Distributed System Verification",
            "authors": ["Wolf Honoré"],
            "conference": "Yale University PhD Dissertation",
            "year": 2022,
            "url": "/assets/pubs/dissertation.pdf",
            "abstract": ["Distributed systems are at the heart of most web-based applications and are responsible for replicating and maintaining critical data. Unfortunately, their inherent concurrency combined with an asynchronous and unreliable network makes them prone to implementation bugs that can have serious real-world consequences. Formal verification can offer strong assurances of correctness; however, despite recent advances, reasoning directly about a system's implementation remains prohibitively complex. The key is to find the right abstraction that faithfully models a system's behaviors, while avoiding irrelevant implementation details.", "This dissertation presents such an abstraction called the atomic distributed object (ADO) model, which hides the existence of the network and reduces all behaviors to three atomic operations. This not only makes the ADO model simpler, which enables more scalable verification, but it also means it is general enough to capture a wide variety of systems. We describe three verification frameworks built around the ADO model, each implemented in the Coq proof assistant and targeted at different problems. The first, Advert, supports compositional reasoning about distributed objects, which can be combined to build more complex applications. The second, Adore, proves the safety of a general class of reconfiguration schemes, which is an essential, but often overlooked, operation for practical distributed systems. Finally, AdoB shows that the ADO model can be used for liveness reasoning, and can express both benign and byzantine failure models in a unified manner."],
            "notes": ["Typo on page 121 (paragraph <b>Caches</b>): <i>Commit</i> should be <i>CCache</i>"],
            "media": [{ "name": "Defense Slides", "file": "defense-slides.pdf", "type": "slides" }]
        }
    ]
}

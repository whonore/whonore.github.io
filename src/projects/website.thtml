<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wolf Honore -- Projects -- Website</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300&display=swap" />
    <link rel="stylesheet" href="/src/style.css" />
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.webmanifest" />
  </head>
  <body>
    <div class="console">
      <header>
        <div class="typed"><span>wolf.html</span></div>
        <nav>
          <a href="/index.html">/home</a>
          <a href="/src/projects.html">/projects</a>
          <a href="/src/music.html">/music</a>
          <a href="/src/photos.html">/photos</a>
          <a href="/src/pubs.html">/publications</a>
        </nav>
      </header>
      <main>
        <h1><a href="<%j ../../assets/projects/website.json.link %>"><%j ../../assets/projects/website.json.title %></a></h1>
        <p><%j ../../assets/projects/website.json.short %></p>
        <hr />
        <section>
          <h2>What/why?</h2>
          <p>
            During my PhD, I had a
            <a href="https://www.cs.yale.edu/~wlh23">personal website</a>, hosted
            by Yale, that was mostly just a publications list.
            After I defended in mid-2022, I decided I wanted a new one that I
            had more access to, looked nicer, and where I could showcase some
            of my other interests.
            I had the idea to make it look sort of console-y, wrote some HTML
            and CSS, threw it on GitHub Pages, and lo, a website was born.
          </p>
        </section>
        <section>
          <h2>How?</h2>
          <p>
            The "wrote some HTML and CSS" part is actually a significant
            oversimplification; this thing is an overengineered monster.
            After using React and drowning in <code>node_modules</code> for the
            last site, my main goals for this one were to use only plain,
            semantic HTML and CSS, nary a drop of JavaScript, while still being
            reactive and having some fun visual elements, and to automate as
            many tedious processes as possible.
            This led to lots of time browsing
            <a href="https://css-tricks.com/">CSS-Tricks</a> and the
            development of a suite of home-grown build infrastructure tools.
            Some of the interesting bits are highlighted below.
          </p>
          <section class="no-border">
            <h3>Build Pipeline</h3>
            <ul>
              <li><!-- JOIN
              -->For the music, photos, and publications pages, I wanted to use
                the same block of HTML for a bunch of items, but with different
                details like titles, captions, and links.
                Enter <abbr title="Template HTML">THTML</abbr>, my custom HTML
                template format.
                It understands JSON, so the following will read
                <code>music.json</code> and generate a
                <code>&lt;section&gt;</code> for each object in the
                <var>songs</var> array using the <var>title</var> and
                <var>audio</var> fields.
                <pre><code>
&lt;%%j music.json.songs %&gt;
  &lt;section&gt;
    &lt;h3&gt;&lt;%ji .title %&gt;&lt;/h3&gt;
    &lt;audio&gt;
      &lt;source src=&quot;/assets/music/&lt;%ji .audio %&gt;&quot; /&gt;
    &lt;/audio&gt;
  &lt;/section&gt;
&lt;%%e %&gt;
                </code></pre>
              </li>
              <li><!-- JOIN
              -->The world map on the <a href="/src/photos.html">photos</a> page
                is automatically generated by reading the coordinates from some
                <a href="https://en.wikipedia.org/wiki/Shapefile">shape files</a>
                downloaded from
                <a href="https://www.naturalearthdata.com/downloads/110m-cultural-vectors/">Natural Earth Data</a>
                and creating SVG polygons.
                The shape files also include metadata like the country/state
                name, so the conversion script checks if there's a
                corresponding subdirectory in the photos directory and adds a
                link if so.
              </li>
              <li><!-- JOIN
              -->In order to keep my
                <a href="https://github.com/whonore/Resume/releases/download/latest/resume.pdf">CV</a>
                up to date, rather than include a static PDF in the website
                source, the LaTeX files are kept in their own repo with a
                GitHub Action set up to compile it and save the PDF as a
                release artifact.
              </li>
              <li><!-- JOIN
              -->The entire site is "built" from a Makefile.
                This includes running the THTML and world map generator
                scripts, copying and optimizing assets like photos and audio,
                minifying HTML and CSS, and generating favicons of various
                sizes.
                The result is a directory with everything needed to serve the
                site.
              </li>
              <li><!-- JOIN
              -->To test the site locally I wrote a small Python web server
                that's just
                <a href="https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler"><var>SimpleHTTPRequestHandler</var></a>
                with some extra HTTP headers to prevent caching.
                It also runs a custom file watcher to handle automatic
                rebuilding whenever the source files change.
                It's a bit overkill for a static site, but it makes it easier
                to test on other devices, like my phone.
              </li>
              <li><!-- JOIN
              -->Finally, the site is deployed by a GitHub Action that builds
                the site using a Nix Flake and puts it where GitHub Pages
                expects.
              </li>
            </ul>
          </section>
          <section class="no-border">
            <h3>Fun CSS Trickery</h3>
            <ul>
              <li><!-- JOIN
              -->The thing in the header that types out wolf.html when the page
                loads (unless <var>prefers-reduced-motion</var> is set) uses
                CSS animations.
                The typing effect works by using <code>clip-path</code> to
                reveal one character at a time (every character is exactly
                <code>1ch</code> wide since I'm using a monospace font).
                The cursor is a <code>1ch</code>-wide empty
                <code>::after</code> pseudo-element that blinks by alternating
                between 0% and 100% <code>opacity</code>.
              </li>
              <li><!-- JOIN
              -->The zoom in/out feature of the world map on the
                <a href="/src/photos.html">photos</a> page uses the
                <a href="https://css-tricks.com/the-checkbox-hack/">checkbox hack</a>.
                Using the <code>~</code> selector and the <code>:checked</code>
                pseudo-class, a CSS rule can detect when the box is checked and
                adjust the map's width.
              </li>
              <li><!-- JOIN
              -->The little arrow on the top right corner of links uses
                <code>::after</code> with a border on the top and right sides.
                To make it grow on hover, the whole thing is scaled with
                <code>transform</code> while the thickness of the border is
                reduced to keep it the same size.
                There's also some positioning trickery to get it to work with
                links with line breaks that doesn't work perfectly in all
                browsers, but it's good enough for me.
              </li>
            </ul>
          </section>
        </section>
      </main>
    </div>
  </body>
</html>
